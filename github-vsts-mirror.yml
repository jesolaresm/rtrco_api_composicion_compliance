# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- feature/*

variables:
# grupo de variables para sincronizar github y devops
- name: var_p_typeTask                        # tipo de agente de compilación
  value: ec2                              # ec2 | fargate 
- name: var_p_appName                         # nombre base de aplicación
  value: api_people
# -------------------------------  
- group: github-mirror
- name: var_p_agentName
  value: adct_${{variables.var_p_appName}}_ci
- name: var_p_agentNameBuildId
  value: ${{variables.var_p_agentName}}-$(Build.BuildId)  
- name: var_p_sonarProject
  value: rdct_$(var_p_appName)
- name: var_p_ecrRepositoryName
  value: edct_$(var_p_appName)
- name: var_p_createArtifact
  value: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))]

#resources:
#  repositories:
#    - repository: templates
#      type: git
#      name: rdct_util_pipeline

stages:
#- template: create_agent.yml@templates
#  parameters:
#    par_p_typeTask: ${{variables.var_p_typeTask}}
#    par_p_agentNameBuildId: ${{variables.var_p_agentNameBuildId}}




- stage: 'Build'
  pool: 
    name: aws agents default
    demands: 
    - AZP_SIZE -equals sm
  displayName: 'Continuous Integration'
  jobs: 
  - job: 'CI'
    displayName: 'Job de CI'
    steps:
    - task: CmdLine@2
      displayName: "Lint contract"
      inputs:
        script: 'spectral lint reference/*'
    - task: CmdLine@2
      inputs:
        script: |
          repoName=$(Build.Repository.Name)
          repo=${repoName#BAM-GT}
          git remote set-url origin https://$(GitHubPat)@github.com/BAM-GT/${repo}
          git remote add sync https://$(AzureDevOpsPat)@dev.azure.com/BancoAgromercantilGT/Transformaci%C3%B3n%20Digital/_git/${repo}
          git checkout 'feature/$(Build.SourceBranchName)'
          git pull    
          git push sync 'feature/$(Build.SourceBranchName)'
        workingDirectory: '$(Build.SourcesDirectory)'
#- template: remove_agent.yml@templates
#  parameters:
#    par_p_typeTask: ec2
#    par_p_agentNameBuildId: ${{variables.var_p_agentNameBuildId}}